<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-3.0.xsd">


	<bean id="handlerMapping" class="org.metis.cassandra.ClientMapper">
		<property name="mappings">
			<value>
				/user=user
				/dtypes=dtypes
				/customer=customer
				/tag=tag
				/video*=videoevent
			</value>
		</property>
	</bean>

	<!-- A Client bean called user and its injected CQL statements -->
	<bean id="user" class="org.metis.cassandra.Client">
		<property name="cqls">
			<list>
				<ref bean="select1" />
				<ref bean="select2" />
				<ref bean="select3" />
				<ref bean="insert1" />
				<ref bean="deleteUser" />
			</list>
		</property>
		<property name="keyspace" value="videodb" />
		<property name="clusterBean" ref="cluster1" />
		<property name="defaultMethod">
			<util:constant static-field="org.metis.cassandra.Client.Method.SELECT" />
		</property>
	</bean>

	<!-- A list of CQL statements used for supporting the user Client -->
	<bean id="select1" class="org.metis.cassandra.CqlStmnt">
		<property name="statement" value="select * from users" />
		<property name="fetchSize" value="100" />
	</bean>
	<bean id="select2" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select username from users where username =
					`text:username`" />
	</bean>
	<bean id="select3" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select username, email from users where username =
					`text:user`" />
	</bean>
	<bean id="insert1" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="insert into users (username, created_date, email, firstname,
					lastname, password) values (`text:username`,
					`timestamp:created_date`, `list:text:email`,
					`text:firstname`,`text:lastname`,`text:password`)" />
	</bean>
	<bean id="deleteUser" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="delete from users where username = `text:user`" />
	</bean>


	<!-- A Client bean called videoevent and its injected CQL statements -->
	<bean id="videoevent" class="org.metis.cassandra.Client">
		<property name="cqls">
			<list>
				<ref bean="select4" />
				<ref bean="select5" />
				<ref bean="delete1" />
				<ref bean="insert2" />
				<ref bean="select6" />
				<ref bean="delete6" />
				<ref bean="insert6" />
			</list>
		</property>
		<property name="keyspace" value="videodb" />
		<property name="clusterBean" ref="cluster1" />
	</bean>
	<!-- A list of CQL statements used for supporting the videoevent Client -->
	<bean id="select4" class="org.metis.cassandra.CqlStmnt">
		<property name="statement" value="select * from video_event" />
	</bean>

	<bean id="select5" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select * from video_event where videoid =
					`uuid:videoid` and	username = `text:username`" />
	</bean>

	<bean id="delete1" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="delete from video_event where videoid =
					`uuid:videoid` and	username = `text:username`" />
	</bean>
	<bean id="insert2" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="insert into video_event (videoid, username,
					event_timestamp,
					event, video_timestamp) values
					(`uuid:videoid`, `text:username`,
					`timeuuid:event_timestamp`,
					`text:event`, `bigint:video_timestamp`)" />
	</bean>

	<bean id="select6" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select * from videos where videoid = `uuid:videoid`" />
	</bean>
	<bean id="insert6" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="insert into videos (videoid, description,
					location, tags,
					upload_date, username, videoname) values
					(`uuid:videoid`,
					`text:description`, `map:text:location`,
					`set:text:tags`,
					`timestamp:upload_date`, `text:username`,
					`text:videoname`)" />
	</bean>
	<bean id="delete6" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="delete from videos where videoid =
					`uuid:videoid`" />
	</bean>


	<bean id="tag" class="org.metis.cassandra.Client">
		<property name="cqls">
			<list>
				<ref bean="tag1" />
				<ref bean="tag2" />
			</list>
		</property>
		<property name="keyspace" value="videodb" />
		<property name="clusterBean" ref="cluster1" />
		<property name="defaultMethod">
			<util:constant static-field="org.metis.cassandra.Client.Method.SELECT" />
		</property>
	</bean>
	<bean id="tag1" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select count(*) from tag_index where tag = `text:tag`" />
	</bean>
	<bean id="tag2" class="org.metis.cassandra.CqlStmnt">
		<property name="statement" value="select * from tag_index" />
		<property name="pagingState" value="true" />
		<property name="fetchSize" value="5" />
	</bean>

	<!-- A Client bean called customer used for testing tuples -->
	<bean id="customer" class="org.metis.cassandra.Client">
		<property name="cqls">
			<list>
				<ref bean="insertCustomer" />
				<ref bean="deleteCustomer" />
				<ref bean="selectCustomer" />
				<ref bean="selectLocation" />
			</list>
		</property>
		<property name="defaultMethod">
			<util:constant static-field="org.metis.cassandra.Client.Method.SELECT" />
		</property>
		<property name="keyspace" value="videodb" />
		<property name="clusterBean" ref="cluster1" />
	</bean>

	<bean id="insertCustomer" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="insert into customer (username, firstname,
					lastname, email, password, created_date,
					location) values (`text:username`,
					`text:firstname`, `text:lastname`,
					`list:text:email`,	`text:password`, 
					`timestamp:created_date`, 
					`tuple:location`)" />
	</bean>

	<bean id="deleteCustomer" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="delete from customer where username = `text:username`" />
	</bean>

	<bean id="selectCustomer" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select * from customer where username = `text:username`" />
	</bean>

	<bean id="selectLocation" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select location from customer where username = `text:locationuser`" />
	</bean>



	<!-- A Client bean called 'dtypes' used for testing different data types -->
	<bean id="dtypes" class="org.metis.cassandra.Client">
		<property name="cqls">
			<list>
				<ref bean="insertDtypes" />
				<ref bean="insertJSON" />
				<ref bean="deleteDtypes" />
				<ref bean="selectDtypes" />
				<ref bean="selectJSON" />
			</list>
		</property>
		<property name="defaultMethod">
			<util:constant static-field="org.metis.cassandra.Client.Method.SELECT" />
		</property>
		<property name="keyspace" value="videodb" />
		<property name="clusterBean" ref="cluster1" />
	</bean>
	<bean id="insertDtypes" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="insert into field_test 
			(test_uuid,	test_varchar,test_boolean,test_date, test_decimal,test_double, test_float, 
			 test_inet, test_int,  test_smallint, test_text, test_time, test_timestamp, test_timeuuid, 
			 test_tinyint, test_varint) 
             values (`uuid:test_uuid`,	`varchar:test_varchar`,	`boolean:test_boolean`,
			 `date:test_date`,`decimal:test_decimal`, `double:test_double`,
			 `float:test_float`,`inet:test_inet`, `int:test_int`, `smallint:test_smallint`,
			 `text:test_text`, `time:test_time`,`timestamp:test_timestamp`,
			 `timeuuid:test_timeuuid`, `tinyint:test_tinyint`,`varint:test_varint`)" />
	</bean>
	<bean id="deleteDtypes" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="delete from field_test where test_uuid = `uuid:test_uuid`" />
	</bean>
	<bean id="selectDtypes" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select * from field_test where test_uuid = `uuid:test_uuid`" />
	</bean>
	<bean id="selectJSON" class="org.metis.cassandra.CqlStmnt">
		<property name="statement"
			value="select json test_uuid, test_int from field_test" />
	</bean>
	<bean id="insertJSON" class="org.metis.cassandra.CqlStmnt">
		<property name="statement" value="insert into field_test json `text:json`" />
	</bean>



	<bean id="cluster1" class="org.metis.cassandra.ClusterBean">
		<property name="clusterName" value="myCluster" />
		<property name="clusterNodes" value="127.0.0.1" />
		<property name="loadBalancingPolicy" ref="roundRobin" />
		<property name="reconnectionPolicy" ref="reconnectionPolicy" />
		<property name="retryPolicy" ref="retryPolicy" />
		<property name="metricsOptions" ref="metricsOptions" />
		<property name="protocolOptions" ref="protocolOptions" />
		<property name="socketOptions" ref="socketOptions" />
		<property name="poolingOptions" ref="poolingOptions" />
		<property name="listOfPoolingOptions">
			<list>
				<ref bean="localOption" />
				<ref bean="remoteOption" />
			</list>
		</property>
		<property name="queryOptions" ref="queryOptions" />
	</bean>

	<!-- Referenced Beans -->
	<bean id="roundRobin" class="com.datastax.driver.core.policies.RoundRobinPolicy" />
	<bean id="reconnectionPolicy"
		class="com.datastax.driver.core.policies.ExponentialReconnectionPolicy">
		<constructor-arg type="long" value="10" />
		<constructor-arg type="long" value="10000" />
	</bean>
	<bean id="retryPolicy"
		class="com.datastax.driver.core.policies.DowngradingConsistencyRetryPolicy" />

	<bean id="metricsOptions" class="com.datastax.driver.core.MetricsOptions">
		<constructor-arg name="enabled" value="true" />
		<constructor-arg name="jmxEnabled" value="true" />
	</bean>
	<bean id="protocolOptions" class="com.datastax.driver.core.ProtocolOptions">
		<constructor-arg name="port" value="9042" />
		<!-- The protocolVersion can be null, in which case the version used will 
			be the biggest version supported by the first node the driver connects to -->
		<constructor-arg name="protocolVersion">
			<bean id="protocolVersion" class="com.datastax.driver.core.ProtocolVersion"
				factory-method="fromInt">
				<constructor-arg value="4" />
			</bean>
		</constructor-arg>
		<constructor-arg name="maxSchemaAgreementWaitSeconds"
			value="2" />
		<constructor-arg name="sslOptions">
			<null />
		</constructor-arg>
		<constructor-arg name="authProvider">
			<null />
		</constructor-arg>
	</bean>
	<bean id="socketOptions" class="com.datastax.driver.core.SocketOptions" />
	<bean id="poolingOptions" class="com.datastax.driver.core.PoolingOptions" />
	<bean id="localOption" class="org.metis.cassandra.PoolingOption">
		<property name="hostDistance">
			<util:constant static-field="com.datastax.driver.core.HostDistance.LOCAL" />
		</property>
		<property name="coreConnectionsPerHost" value="5" />
		<property name="maxConnectionsPerHost" value="10" />
		<property name="newConnectionThreshold" value="2" />
		<property name="maxRequestsPerConnection" value="5" />
	</bean>
	<bean id="remoteOption" class="org.metis.cassandra.PoolingOption">
		<property name="hostDistance">
			<util:constant static-field="com.datastax.driver.core.HostDistance.REMOTE" />
		</property>
		<property name="coreConnectionsPerHost" value="2" />
		<property name="maxConnectionsPerHost" value="10" />
		<property name="newConnectionThreshold" value="2" />
		<property name="maxRequestsPerConnection" value="5" />
	</bean>

	<!-- An example of how to inject an Enum of ONE for the consistency level -->
	<bean id="queryOptions" class="com.datastax.driver.core.QueryOptions">
		<property name="consistencyLevel">
			<util:constant static-field="com.datastax.driver.core.ConsistencyLevel.ONE" />
		</property>
	</bean>

</beans>
